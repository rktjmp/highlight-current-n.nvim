*highlight-cursor-match* highlight cursor matches for n|N
>
         _     _       _     _ _       _     _
        | |   (_)     | |   | (_)     | |   | |
        | |__  _  __ _| |__ | |_  __ _| |__ | |_
        | '_ \| |/ _` | '_ \| | |/ _` | '_ \| __|
        | | | | | (_| | | | | | | (_| | | | | |_    _       _
        |_| |_|_|\__, |_| |_|_|_|\__, |_| |_|\__|  | |     | |
    ___ _   _ _ __ _|_| ___  _ __ _ | |_ ___   __ _| |_ ___| |__
   / __| | | | '__/ __|/ _ \| '__| | '_ ` _ \ / _` | __/ __| '_ \
  | (__| |_| | |  \__ \ (_) | |    | | | | | | (_| | || (__| | | |
   \___|\__,_|_|  |___/\___/|_|    |_| |_| |_|\__,_|\__\___|_| |_|


Highlights {n}/{N} matches at your cursor, hides automatically.

====================================================  *highlight-cursor-match-toc*

Install ......................................... *highlight-cursor-match-install*
Setup ............................................. *highlight-cursor-match-setup*
Maps ............................................... *highlight-cursor-match-maps*
Functions ..................................... *highlight-cursor-match-functions*
Demo Configuration ................... *highlight-cursor-match-demo-configuration*

================================================= *highlight-cursor-match-install*

Install ~

*Requirements*

- Neovim 0.5

*Installation*

Use a package manager:
>
    your_package_manager "rktjmp/highlight-cursor-match.nvim"

=================================================== *highlight-cursor-match-setup*

Setup ~

Default options are shown, calling setup is **not** required unless you are
changing an option.
>
  require("highlight_cursor_match").setup({
    highlight_group = "IncSearch" -- highlight group name to use for highlight
  })

See also |highlight-cursor-match-demo-configuration| for important information
regarding highlighting `/` and `?` searches.

==================================================== *highlight-cursor-match-maps*

Maps ~

`highlight-cursor-match` provides 2 `<Plug>` keymaps for your use.

Note: You want to use `nmap`, not `nnoremap` for `<Plug>` mappings.

`<Plug>(highlight-cursor-match-n)` should be mapped to `n`.
>
  nmap n <Plug>(highlight-cursor-match-n)

`<Plug>(highlight-cursor-match-N)` should be mapped to `N`.
>
  nmap N <Plug>(highlight-cursor-match-N)

=============================================== *highlight-cursor-match-functions*

Functions ~

`highlight-cursor-match` provides 3 functions, but probably only 1 is useful.

`require("highlight_cursor_match").n()`

Executes `feedkeys(n)` and applies highlight when appropriate. Normally best
run via the provided `<Plug>` mapping.

`require("highlight_cursor_match").N()`

Executes `feedkeys(N)` and applies highlight when appropriate. Normally best
run via the provided `<Plug>` mapping.

`require("highlight_cursor_match")["/,?"]()`

Applies highlight at cursor, most useful when used in combination with the
following autocommand, be careful when escaping `\?` in lua configurations.
>
  autocmd CmdlineLeave /,\? lua require('highlight_cursor_match')['/,?']()

====================================== *highlight-cursor-match-demo-configuration*

Demo Configuration ~

`highlight-cursor-match` only provides two maps to show highlights, but the
following configuration may be preferred in real world use, especially the last
`CmdlineLeave` autocommand.
>
  " Map keys
  nmap n <Plug>(highlight-cursor-match-n)
  nmap N <Plug>(highlight-cursor-match-N)

  " If you want the highlighting to take effect in other maps they must
  " also be nmaps (or rather, not "nore").
  "
  " * will search <cword> ahead, but it can be more ergonomic to have *
  " simply fill the / register with the current <cword>, which makes future
  " commands like cgn "feel better". This effectively does that by performing
  " "search ahead <cword> (*), go back to last match (N)".
  nmap * *N

  " Some QOL autocommands
  augroup ClearSearchHL
    autocmd!
    " You may only want to see hlsearch /while/ searching, you can automatically
    " toggle hlsearch with the following autocommands
    autocmd CmdlineEnter /,\? set hlsearch
    autocmd CmdlineLeave /,\? set nohlsearch
    " this will apply similar n|N highlighting to the first search result
    " careful with escaping ? in lua, you may need \\?
    autocmd CmdlineLeave /,\? lua require('highlight_cursor_match')['/,?']()
  augroup END

